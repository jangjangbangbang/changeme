---
globs: *.dart
description: UI theming, styling, and visual design guidelines for Flutter applications
---

# UI Theming and Styling Rules

Follow these guidelines for creating beautiful, accessible, and consistent Flutter UIs.

## Visual Design Principles
- **UI Design:** Build beautiful and intuitive user interfaces that follow modern design guidelines
- **Responsiveness:** Ensure the app is mobile responsive and adapts to different screen sizes, working perfectly on mobile and web
- **Navigation:** If there are multiple pages for the user to interact with, provide an intuitive and easy navigation bar or controls
- **Typography:** Stress and emphasize font sizes to ease understanding, e.g., hero text, section headlines, list headlines, keywords in paragraphs

## Theming Best Practices

### Centralized Theme
- **Centralized Theme:** Define a centralized `ThemeData` object to ensure a consistent application-wide style
- **Light and Dark Themes:** Implement support for both light and dark themes, ideal for a user-facing theme toggle (`ThemeMode.light`, `ThemeMode.dark`, `ThemeMode.system`)
- **Color Scheme Generation:** Generate harmonious color palettes from a single color using `ColorScheme.fromSeed`

### Material 3 Theming
- **Use `ColorScheme.fromSeed()`:** Use this to generate a complete, harmonious color palette for both light and dark modes from a single color
- **Define Light and Dark Themes:** Provide both `theme` and `darkTheme` to your `MaterialApp` to support system brightness settings seamlessly
- **Centralize Component Styles:** Customize specific component themes (e.g., `elevatedButtonTheme`, `cardTheme`, `appBarTheme`) within `ThemeData` to ensure consistency

### Custom Theme Extensions
- **ThemeExtension:** For custom styles that aren't part of the standard `ThemeData`, use `ThemeExtension` to define reusable design tokens
- **Create Custom Theme Extension:** Define a class that extends `ThemeExtension<T>` and include your custom properties
- **Implement `copyWith` and `lerp`:** These methods are required for the extension to work correctly with theme transitions
- **Register in `ThemeData`:** Add your custom extension to the `extensions` list in your `ThemeData`

## Color Guidelines

### Color Scheme Best Practices
- **Primary, Secondary, and Accent:** Define a clear color hierarchy
- **The 60-30-10 Rule:** A classic design rule for creating a balanced color scheme
  - **60%** Primary/Neutral Color (Dominant)
  - **30%** Secondary Color
  - **10%** Accent Color

### Contrast and Accessibility
- **WCAG Guidelines:** Aim to meet the Web Content Accessibility Guidelines (WCAG) 2.1 standards
- **Minimum Contrast:**
  - **Normal Text:** A contrast ratio of at least **4.5:1**
  - **Large Text:** (18pt or 14pt bold) A contrast ratio of at least **3:1**
- **Color Contrast:** Ensure text has a contrast ratio of at least **4.5:1** against its background

## Typography Guidelines

### Font Selection
- **Limit Font Families:** Stick to one or two font families for the entire application
- **Prioritize Legibility:** Choose fonts that are easy to read on screens of all sizes. Sans-serif fonts are generally preferred for UI body text
- **Google Fonts:** For a wide selection of open-source fonts, use the `google_fonts` package
- **Poppins Font:** Use Poppins Font Family when specified

### Typography Scale
- **Establish a Scale:** Define a set of font sizes for different text elements (e.g., headlines, titles, body text, captions)
- **Use Font Weight:** Differentiate text effectively using font weights
- **Line Height:** Set an appropriate line height, typically **1.4x to 1.6x** the font size
- **Line Length:** For body text, aim for a line length of **45-75 characters**

## Layout Best Practices

### Responsive Design
- **LayoutBuilder:** Use `LayoutBuilder` for complex, responsive layouts to make decisions based on the available space
- **MediaQuery:** Use `MediaQuery` to create responsive UIs
- **Flexible Layouts:** Use `Expanded`, `Flexible`, and `Wrap` for flexible layouts

### Performance Layouts
- **ListView.builder:** For long lists or grids of content, always use a builder constructor (`.builder`)
- **SingleChildScrollView:** Use when your content is intrinsically larger than the viewport, but is a fixed size
- **FittedBox:** Use to scale or fit a single child widget within its parent

## Visual Effects
- **Background:** Apply subtle noise texture to the main background to add a premium, tactile feel
- **Shadows:** Multi-layered drop shadows create a strong sense of depth; cards have a soft, deep shadow to look "lifted"
- **Icons:** Incorporate icons to enhance the user's understanding and the logical navigation of the app
- **Interactive Elements:** Buttons, checkboxes, sliders, lists, charts, graphs, and other interactive elements have a shadow with elegant use of color to create a "glow" effect

## Accessibility (A11Y)
- **Dynamic Text Scaling:** Test your UI to ensure it remains usable when users increase the system font size
- **Semantic Labels:** Use the `Semantics` widget to provide clear, descriptive labels for UI elements
- **Screen Reader Testing:** Regularly test your app with TalkBack (Android) and VoiceOver (iOS)

## Assets and Images
- **Asset Declaration:** Declare all asset paths in your `pubspec.yaml` file
- **Local Images:** Use `Image.asset` for local images from your asset bundle
- **Network Images:** Use `Image.network` to display images from a URL, and always include `loadingBuilder` and `errorBuilder` for a better user experience
- **Cached Images:** For cached images, use a package like `cached_network_image`